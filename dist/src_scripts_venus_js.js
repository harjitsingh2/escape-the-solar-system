/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkescape_the_solar_system"] = self["webpackChunkescape_the_solar_system"] || []).push([["src_scripts_venus_js"],{

/***/ "./src/scripts/venus.js":
/*!******************************!*\
  !*** ./src/scripts/venus.js ***!
  \******************************/
/***/ (function() {

eval("// import Planet from './planet.js';\n\n// let venus = new Planet;\n\n// function makePlanet2() {\n//     const planet = document.getElementById(\"myplanet\");\n//     planet.width = 400;\n//     planet.height = 600;\n//     const ctx = planet.getContext(\"2d\"); \n//     venus.makeVenus(ctx);\n// }\n// makePlanet2();\n\nconsole.log(\"Welcome to Venus\");\n\n// array of questions and answer objects\nlet questions = [{\n  question: \"Venus, aka 'Earth's twin', has a size and structure similar to Earth. But it has a dense and toxic atmosphere filled with carbon dioxide and sulfuric acid which has led to extreme surface heat. Venus rotates very slowly. One day on Venus is 243 Earth days and one year is 225 Earth days. Meaning that a Venusian day is longer than a year! Additionally, Venus rotates in the opposite direction of most planets. It is quite the oddball.\"\n}, {\n  question: \"Venus is the hottest planet in our solar system\",\n  answers: {\n    a: \"true\",\n    b: \"false\"\n  },\n  correctAnswer: 'a'\n}, {\n  question: \"Approximately how long is one day on Venus?\",\n  answers: {\n    a: \"1 Earth day\",\n    b: \"100 Earth days\",\n    c: \"200 Earth days\"\n  },\n  correctAnswer: 'c'\n}, {\n  question: \"Which of these can be found in Venus' atmosphere?\",\n  answers: {\n    a: \"oxygen\",\n    b: \"ozone\",\n    c: \"sulfuric acid\"\n  },\n  correctAnswer: 'c'\n}];\n\n// get references to HTML elements\nconst quizContainer = document.getElementById('quiz');\nconst resultsContainer = document.getElementById('results');\nconst submitButton = document.getElementById('submit');\n\n// create our game quiz\nfunction buildQuiz() {\n  // store the HTML output\n  const output = [];\n  questions.forEach((currentQuestion, questionNumber) => {\n    // store the list of possible answers\n    const answers = [];\n\n    // add radio button for each possible answer and add to array \n    for (letter in currentQuestion.answers) {\n      answers.push(`<label>\n              <input type=\"radio\" name=\"question${questionNumber}\" value=\"${letter}\">\n              ${letter})\n              ${currentQuestion.answers[letter]}\n            </label>`);\n    }\n\n    // add this question and its answers to the output array\n    output.push(`<div class=\"slide\">\n            <div class=\"question\"> ${currentQuestion.question} </div>\n            <div class=\"answers\"> ${answers.join('')} </div>\n          </div>`);\n  });\n\n  // combine  output list into one string of HTML and display on page\n  quizContainer.innerHTML = output.join('');\n}\n\n// show results to quiz  \nfunction showResults() {\n  // gather answer containers from our quiz\n  const answerContainers = quizContainer.querySelectorAll('.answers');\n\n  // keep track of user's lives\n  let score = 0;\n\n  // find answer for each question\n  questions.forEach((currentQuestion, questionNumber) => {\n    const answerContainer = answerContainers[questionNumber];\n    const selector = `input[name=question${questionNumber}]:checked`;\n    const userAnswer = (answerContainer.querySelector(selector) || {}).value;\n    if (userAnswer === currentQuestion.correctAnswer) {\n      score++;\n      answerContainers[questionNumber].style.color = 'lightgreen';\n    } else {\n      answerContainers[questionNumber].style.color = 'red';\n    }\n  });\n  resultsContainer.innerHTML = `Yours score: ${score} / ${questions.length}`;\n}\n\n// function to create slides of questions\nfunction showSlide(n) {\n  slides[currentSlide].classList.remove('active-slide');\n  slides[n].classList.add('active-slide');\n  currentSlide = n;\n  submitButton.style.display = 'inline-block';\n  if (currentSlide === slides.length - 1) {\n    nextButton.style.display = 'none';\n    submitButton.style.display = 'inline-block';\n  } else {\n    nextButton.style.display = 'inline-block';\n    submitButton.style.display = 'none';\n  }\n}\nfunction showNextSlide() {\n  showSlide(currentSlide + 1);\n}\nbuildQuiz();\n\n// creating pagination\nconst nextButton = document.getElementById(\"next\");\nconst slides = document.querySelectorAll(\".slide\");\nlet currentSlide = 0;\nshowSlide(currentSlide);\nsubmitButton.addEventListener('click', showResults);\nnextButton.addEventListener(\"click\", showNextSlide);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/venus.js\n");

/***/ })

}]);